name: Logger & Error Handling Checks

on:
  pull_request:
    paths:
      - 'src/**/*.ts'
      - 'src/**/*.tsx'
      - '.eslintrc.js'

permissions:
  contents: read

jobs:
  logger-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run logger unit tests
        run: yarn vitest src/logger --run

      - name: Check for console.* usage
        run: |
          echo "Checking for direct console usage in production code..."

          # Exclude legitimate uses
          EXCLUDE_PATTERNS=(
            --exclude-dir="logger"
            --exclude-dir="scripts"
            --exclude="*.test.ts"
            --exclude="*.spec.ts"
            --exclude="*.test.tsx"
            --exclude="testLogger.ts"
            --exclude="generateSymbols.ts"
          )

          # Files that are allowed to use console (debugging/development)
          ALLOWED_FILES=(
            "src/core/state/internal/signal.ts"
            "src/core/state/internal/createQueryStore.ts"
          )

          # Find console usage
          CONSOLE_USAGE=$(grep -r "console\.\(log\|warn\|error\|debug\)" src/ \
            --include="*.ts" \
            --include="*.tsx" \
            "${EXCLUDE_PATTERNS[@]}" || true)

          # Filter out allowed files
          FILTERED_USAGE=""
          while IFS= read -r line; do
            FILE=$(echo "$line" | cut -d: -f1)
            ALLOWED=false
            for ALLOWED_FILE in "${ALLOWED_FILES[@]}"; do
              if [[ "$FILE" == "$ALLOWED_FILE" ]]; then
                ALLOWED=true
                break
              fi
            done
            if [[ "$ALLOWED" == "false" ]]; then
              FILTERED_USAGE="${FILTERED_USAGE}${line}\n"
            fi
          done <<< "$CONSOLE_USAGE"

          if [[ -n "$FILTERED_USAGE" && "$FILTERED_USAGE" != "\n" ]]; then
            echo "❌ Found console.* statements in production code:"
            echo -e "$FILTERED_USAGE"
            echo "Please use logger instead of console."
            exit 1
          else
            echo "✅ No unauthorized console.* usage found"
          fi

      - name: Verify logger imports
        run: |
          echo "Checking logger import paths..."
          ! grep -r "from ['\"]\.\..*logger" src/ \
            --include="*.ts" \
            --include="*.tsx" || \
          (echo "❌ Found relative logger imports. Use '~/logger' instead." && exit 1)

      - name: Check RainbowError usage
        run: |
          echo "Checking for proper error handling..."
          # Check that catch blocks use logger.error
          ! grep -A 3 "catch.*{" src/ \
            --include="*.ts" \
            --include="*.tsx" | \
            grep "console\.error" || \
          (echo "❌ Found console.error in catch blocks. Use logger.error with RainbowError." && exit 1)

      - name: Run ESLint with logger rules
        run: |
          yarn lint --max-warnings=0 --rule "no-console:error"

      - name: Type check logger usage
        run: yarn typecheck
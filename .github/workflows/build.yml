
name: CI

on:
  pull_request:
  merge_group:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  # INSTALL DEPS
  install:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22.17.0"
      - name: Enable Corepack
        run: corepack enable
      - name: Install deps via Yarn
        run: |
          yarn install --immutable
          yarn setup
      - name: Check for frozen lockfile
        run: yarn check-lockfile
      - name: Zip node_modules and yarn state
        run: tar czf yarn_node_modules.tar.gz node_modules/ .yarn/install-state.gz
      - name: Upload deps artifacts
        uses: actions/upload-artifact@v4
        with:
          name: yarn_node_modules.tar.gz
          path: yarn_node_modules.tar.gz

  # BUILD THE EXTENSION
  build:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22.17.0"
      - name: Enable Corepack
        run: corepack enable
      - name: Download deps cache artifacts
        uses: actions/download-artifact@v4
        with:
          name: yarn_node_modules.tar.gz
      - name: Unzip node_modules and yarn state
        run: tar xzf yarn_node_modules.tar.gz
      - uses: actions/checkout@v4
        with:
            repository: 'rainbow-me/browser-extension-env'
            token: ${{ secrets.ORG_ACCESS_TOKEN }}
            path: tmp
      - name: Copy dotenv
        run: cat tmp/dotenv >> .env && rm -rf tmp
      - name: Set IS_TESTING=true
        run: |
          sed -i 's/IS_TESTING.*/IS_TESTING=true/g' .env
      - name: Yarn setup again
        run: yarn setup
      - name: Fetch networks
        run: yarn fetch:networks
      - name: Build the extension
        run: yarn build:webpack
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rainbowbx-${{ github.sha }}
          path: build/
      - name: Remove old screenshots
        run: rm -rf screenshots/*
  # FIREFOX TESTS
  # firefox-e2e-parallel:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 18
  #   needs: [build]
  #   env:
  #     DISPLAY: :0
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: ./.github/actions/firefoxTestsSetup
  #       with:
  #         gh-access-token: ${{ secrets.ORG_ACCESS_TOKEN }}
  #     - name: Run e2e parallel (Firefox)
  #       id: FFE2eParallel
  #       continue-on-error: true
  #       run: |
  #           export BROWSER=firefox
  #           export OS=linux
  #           export FIREFOX_BIN="$(pwd)/firefox/firefox"
  #           export MAX_RETRIES=1
  #           yarn firefox:manifest && yarn firefox:zip
  #           yarn vitest:parallel
  #     - name: Upload deps artifacts
  #       if: steps.FFE2eParallel.outcome == 'failure'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: screenshots
  #         path: screenshots/
  #     - name: Fail if any tests failed
  #       if: steps.FFE2eParallel.outcome == 'failure'
  #       run: exit 1
  # firefox-e2e-swap:
  #   runs-on: swaps-runner-bx
  #   timeout-minutes: 25
  #   needs: [build]
  #   env:
  #     DISPLAY: :0
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: ./.github/actions/firefoxTestsSetup
  #       with:
  #         gh-access-token: ${{ secrets.ORG_ACCESS_TOKEN }}
  #     - name: Run e2e Swap (Firefox)
  #       id: FFE2eSwap
  #       continue-on-error: true
  #       run: |
  #         export BROWSER=firefox
  #         export OS=linux
  #         export FIREFOX_BIN="$(pwd)/firefox/firefox"
  #         export MAX_RETRIES=1
  #         yarn firefox:manifest && yarn firefox:zip
  #         yarn vitest:swap
  #     - name: Upload deps artifacts
  #       if: steps.FFE2eSwap.outcome == 'failure'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: screenshots
  #         path: screenshots/
  #     - name: Fail if any tests failed
  #       if: steps.FFE2eSwap.outcome == 'failure'
  #       run: exit 1
  # firefox-e2e-send:
  #   runs-on: send-runner-bx
  #   timeout-minutes: 16
  #   needs: [build]
  #   env:
  #     DISPLAY: :0
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: ./.github/actions/firefoxTestsSetup
  #       with:
  #         gh-access-token: ${{ secrets.ORG_ACCESS_TOKEN }}
  #     - name: Run e2e Send (Firefox)
  #       id: FFE2eSend
  #       continue-on-error: true
  #       run: |
  #           export BROWSER=firefox
  #           export OS=linux
  #           export FIREFOX_BIN="$(pwd)/firefox/firefox"
  #           export MAX_RETRIES=1
  #           yarn firefox:manifest && yarn firefox:zip
  #           yarn vitest:send
  #     - name: Upload deps artifacts
  #       if: steps.FFE2eSend.outcome == 'failure'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: screenshots
  #         path: screenshots/
  #     - name: Fail if any tests failed
  #       if: steps.FFE2eSend.outcome == 'failure'
  #       run: exit 1
  # firefox-e2e-dappInteractions:
  #   runs-on: dapp-interactions-runner-bx
  #   timeout-minutes: 25
  #   needs: [build]
  #   env:
  #     DISPLAY: :0
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: ./.github/actions/firefoxTestsSetup
  #       with:
  #         gh-access-token: ${{ secrets.ORG_ACCESS_TOKEN }}
  #     - name: Run e2e Dapp Interactions (Firefox)
  #       id: FFE2eDappInteractions
  #       continue-on-error: true
  #       run: |
  #         export BROWSER=firefox
  #         export OS=linux
  #         export FIREFOX_BIN="$(pwd)/firefox/firefox"
  #         export MAX_RETRIES=1
  #         yarn firefox:manifest && yarn firefox:zip
  #         yarn vitest:dappInteractions
  #     - name: Upload deps artifacts
  #       if: steps.FFE2eDappInteractions.outcome == 'failure'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: screenshots
  #         path: screenshots/
  #     - name: Fail if any tests failed
  #       if: steps.FFE2eDappInteractions.outcome == 'failure'
  #       run: exit 1
  # CHROME TESTS
  chrome-e2e-parallel:
    runs-on: beefy-runner-bx
    timeout-minutes: 18
    needs: [build]
    env:
      DISPLAY: :0
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/chromeTestsSetup
        with:
          gh-access-token: ${{ secrets.ORG_ACCESS_TOKEN }}
      - name: Run e2e parallel (Chrome)
        id: ChromeE2EParallel
        continue-on-error: true
        run: |
          export BROWSER=chrome
          export OS=linux
          export CHROMIUM_BIN=$(find chrome -type f -name 'chrome')
          export MAX_RETRIES=1
          yarn vitest:parallel
      - name: Upload deps artifacts
        if: steps.ChromeE2EParallel.outcome == 'failure'
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: screenshots-chrome-e2e-parallel
          path: screenshots/
      - name: Fail if any tests failed
        if: steps.ChromeE2EParallel.outcome == 'failure'
        run: exit 1
  chrome-e2e-swap:
    runs-on: swaps-runner-bx
    timeout-minutes: 25
    needs: [build]
    env:
      DISPLAY: :0
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/chromeTestsSetup
        with:
          gh-access-token: ${{ secrets.ORG_ACCESS_TOKEN }}
      - name: Run e2e swap (Chrome)
        id: ChromeE2ESwaps
        continue-on-error: true
        run: |
          export BROWSER=chrome
          export OS=linux
          export CHROMIUM_BIN=$(find chrome -type f -name 'chrome')
          export MAX_RETRIES=1
          yarn vitest:swap
      - name: Upload deps artifacts
        if: steps.ChromeE2ESwaps.outcome == 'failure'
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: screenshots-chrome-e2e-swap
          path: screenshots/
      - name: Fail if any tests failed
        if: steps.ChromeE2ESwaps.outcome == 'failure'
        run: exit 1
  chrome-e2e-send:
    runs-on: send-runner-bx
    timeout-minutes: 16
    needs: [build]
    env:
      DISPLAY: :0
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/chromeTestsSetup
        with:
          gh-access-token: ${{ secrets.ORG_ACCESS_TOKEN }}
      - name: Run e2e send (Chrome)
        id: ChromeE2ESend
        continue-on-error: true
        run: |
          export BROWSER=chrome
          export OS=linux
          export CHROMIUM_BIN=$(find chrome -type f -name 'chrome')
          export MAX_RETRIES=1
          yarn vitest:send
      - name: Upload deps artifacts
        if: steps.ChromeE2ESend.outcome == 'failure'
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: screenshots-chrome-e2e-send
          path: screenshots/
      - name: Fail if any tests failed
        if: steps.ChromeE2ESend.outcome == 'failure'
        run: exit 1
  chrome-optimism-e2e-send:
    runs-on: send-runner-bx
    timeout-minutes: 25
    needs: [build]
    env:
      DISPLAY: :0
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/chromeTestsSetup
        with:
          gh-access-token: ${{ secrets.ORG_ACCESS_TOKEN }}
      - name: Run Optimism e2e send (Chrome)
        id: ChromeOpE2ESend
        continue-on-error: true
        run: |
          export BROWSER=chrome
          export OS=linux
          export CHROMIUM_BIN=$(find chrome -type f -name 'chrome')
          export MAX_RETRIES=1
          yarn vitest:send:optimism
      - name: Upload deps artifacts
        if: steps.ChromeOpE2ESend.outcome == 'failure'
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: screenshots-chrome-optimism-e2e-send
          path: screenshots/
      - name: Fail if any tests failed
        if: steps.ChromeOpE2ESend.outcome == 'failure'
        run: exit 1
  chrome-e2e-dappInteractions:
    runs-on: beefy-runner-bx
    timeout-minutes: 25
    needs: [build]
    env:
      DISPLAY: :0
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/chromeTestsSetup
        with:
          gh-access-token: ${{ secrets.ORG_ACCESS_TOKEN }}
      - name: Run e2e dappInteractions (Chrome)
        id: ChromeE2EDappInteractions
        continue-on-error: true
        run: |
          export BROWSER=chrome
          export OS=linux
          export CHROMIUM_BIN=$(find chrome -type f -name 'chrome')
          export MAX_RETRIES=1
          yarn vitest:dappInteractions
      - name: Upload deps artifacts
        if: steps.ChromeE2EDappInteractions.outcome == 'failure'
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: screenshots-chrome-e2e-dappInteractions
          path: screenshots/
      - name: Fail if any tests failed
        if: steps.ChromeE2EDappInteractions.outcome == 'failure'
        run: exit 1

  # UNIT TESTS
  unit-tests:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22.17.0"
      - name: Enable Corepack
        run: corepack enable
      - name: Download deps cache artifacts
        uses: actions/download-artifact@v4
        with:
          name: yarn_node_modules.tar.gz
      - name: Unzip node_modules and yarn state
        run: tar xzf yarn_node_modules.tar.gz
      - name: Install rust
        uses: moonrepo/setup-rust@v1.2.1
        with:
          channel: stable
          profile: minimal
      - name: Fetch networks
        run: yarn fetch:networks
      - name: Install Anvil
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      - uses: actions/checkout@v4
        with:
            repository: 'rainbow-me/browser-extension-env'
            token: ${{ secrets.ORG_ACCESS_TOKEN }}
            path: tmp
      - name: Copy dotenv
        run: cat tmp/dotenv >> .env && rm -rf tmp
      - name: Set IS_TESTING=true
        run: |
          sed -i 's/IS_TESTING.*/IS_TESTING=true/g' .env
      - name: Run unit tests
        run: yarn test

  # LINT, TYPECHECK, AUDIT
  ci-checks:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22.17.0"
      - name: Enable Corepack
        run: corepack enable
      - name: Download deps cache artifacts
        uses: actions/download-artifact@v4
        with:
          name: yarn_node_modules.tar.gz
      - name: Unzip node_modules and yarn state
        run: tar xzf yarn_node_modules.tar.gz
      - name: DS Setup
        run: yarn ds:install
      - name: Fetch networks
        run: yarn fetch:networks
      - name: Lint
        run: yarn lint
      - name: Audit CI
        run:  yarn audit:ci
      - name: Check types
        run: yarn typecheck
  
  # BUNDLE SIZE CHECK
  bundlewatch:
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      statuses: write  # Needed to post status checks if using GitHub token
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22.17.0"
      - name: Enable Corepack
        run: corepack enable
      - name: Download deps cache artifacts
        uses: actions/download-artifact@v4
        with:
          name: yarn_node_modules.tar.gz
      - name: Unzip node_modules and yarn state
        run: tar xzf yarn_node_modules.tar.gz
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rainbowbx-${{ github.sha }}
          path: build/
      - name: Check bundle sizes
        run: |
          yarn bundlewatch 2>&1 | tee bundlewatch-results.txt
        env:
          CI_REPO_OWNER: ${{ github.repository_owner }}
          CI_REPO_NAME: ${{ github.event.repository.name }}
          CI_COMMIT_SHA: ${{ github.sha }}
          CI_BRANCH: ${{ github.ref_name }}
      - name: Format bundle sizes for summary
        if: always()
        run: |
          echo "## 📦 Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract and display the result breakdown URL if it exists
          if [ -f bundlewatch-results.txt ]; then
            # Look specifically for the bundlewatch result URL (ja2r7.app.goo.gl domain)
            BREAKDOWN_URL=$(grep -A1 "Result breakdown at:" bundlewatch-results.txt | grep -oE "https://ja2r7\.app\.goo\.gl/[a-zA-Z0-9]+" | head -1)
            if [ -n "$BREAKDOWN_URL" ]; then
              echo "📊 **[View detailed breakdown]($BREAKDOWN_URL)**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Check overall status
            if grep -q "bundlewatch PASS" bundlewatch-results.txt; then
              echo "✅ **Status: PASS** - All bundles are within size limits" >> $GITHUB_STEP_SUMMARY
            elif grep -q "bundlewatch FAIL" bundlewatch-results.txt; then
              echo "❌ **Status: FAIL** - Some bundles exceed size limits" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Extract total size change if present
            TOTAL_CHANGE=$(grep -oE "Everything is in check \([^)]+\)" bundlewatch-results.txt || true)
            if [ -n "$TOTAL_CHANGE" ]; then
              echo "📈 $TOTAL_CHANGE" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "| File | Size | Limit | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|------|------|-------|--------|" >> $GITHUB_STEP_SUMMARY
            
            # Parse bundlewatch output and format as markdown table
            grep -E "PASS|FAIL" bundlewatch-results.txt | grep "./build/" | while IFS= read -r line; do
              if [[ $line == *"PASS"* ]]; then
                STATUS="✅"
              else
                STATUS="❌"
              fi
              FILE=$(echo "$line" | sed -E 's/.*(\.\/build\/[^:]+):.*/\1/')
              SIZE=$(echo "$line" | sed -E 's/.*: ([0-9.]+[KMB]+).*/\1/')
              LIMIT=$(echo "$line" | sed -E 's/.*< ([0-9.]+[KMB]+).*/\1/')
              echo "| \`${FILE##*/}\` | **${SIZE}** | ${LIMIT} | ${STATUS} |" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "No bundlewatch results found" >> $GITHUB_STEP_SUMMARY
          fi
  
  cleanup:
    runs-on:  ubuntu-latest
    needs: [chrome-e2e-parallel, chrome-e2e-swap, chrome-e2e-send, chrome-e2e-dappInteractions, chrome-optimism-e2e-send, unit-tests, ci-checks, bundlewatch]
    steps:
      - uses: geekyeggo/delete-artifact@v5
        with:
          name: yarn_node_modules.tar.gz
          failOnError: false
      - uses: geekyeggo/delete-artifact@v5
        with:
          name: screenshots-*
          failOnError: false

query getContractFunction($chainID: Int!, $hex: String!, $address: String!) {
  contractFunction(chainID: $chainID, hex: $hex, address: $address) {
    text
  }
}

query resolveENSProfile($chainId: Int!, $name: String!, $fields: [String!]) {
  resolveENSProfile(chainID: $chainId, name: $name, fields: $fields) {
    address
    resolverAddress
    reverseResolverAddress
    fields {
      key
      value
    }
  }
}

query reverseResolveENSProfile(
  $chainId: Int!
  $address: String!
  $fields: [String!]
) {
  reverseResolveENSProfile(
    chainID: $chainId
    address: $address
    fields: $fields
  ) {
    name
    resolverAddress
    reverseResolverAddress
    fields {
      key
      value
    }
  }
}

query aboutToken($chainId: Int!, $address: String!, $currency: String) {
  token(chainID: $chainId, address: $address, currency: $currency) {
    marketCap
    fullyDilutedValuation
    allTime {
      highValue
      lowValue
    }
    bridging
    circulatingSupply
    totalSupply
    networks
    volume1d
    description
    links {
      homepage {
        url
      }
      twitter {
        url
      }
      facebook {
        url
      }
      reddit {
        url
      }
      telegram {
        url
      }
    }
  }
}

query priceChart(
  $chainId: Int!
  $address: String!
  $day: Boolean!
  $hour: Boolean!
  $week: Boolean!
  $month: Boolean!
  $year: Boolean!
) {
  token(chainID: $chainId, address: $address) {
    priceCharts {
      day @include(if: $day) {
        points
      }
      hour @include(if: $hour) {
        points
      }
      week @include(if: $week) {
        points
      }
      month @include(if: $month) {
        points
      }
      year @include(if: $year) {
        points
      }
    }
  }
}

query dApp($shortName: String!, $url: String!, $status: Boolean!) {
  dApp(shortName: $shortName, url: $url) {
    name
    status @include(if: $status)
    colors {
      primary
      fallback
      shadow
    }
    iconURL
    url
    description
    shortName
  }
}

fragment asset on TransactionSimulationAsset {
  assetCode
  decimals
  iconURL
  name
  network
  symbol
  type
  interface
  tokenId
  status
}
fragment change on TransactionSimulationChange {
  asset {
    ...asset
  }
  quantity
}
fragment target on TransactionSimulationTarget {
  address
  name
  iconURL
  function
  created
  sourceCodeStatus
}

query simulateTransactions(
  $chainId: Int!
  $transactions: [Transaction!]!
  $domain: String
) {
  simulateTransactions(
    chainID: $chainId
    transactions: $transactions
    domain: $domain
  ) {
    scanning {
      result
      description
    }
    error {
      message
      type
    }
    simulation {
      in {
        ...change
      }
      out {
        ...change
      }
      approvals {
        asset {
          ...asset
        }
        spender {
          ...target
        }
        quantityAllowed
        quantityAtRisk
        expiration
      }
      meta {
        to {
          ...target
        }
      }
    }
  }
}

query simulateMessage(
  $chainId: Int!
  $address: String!
  $message: Message!
  $domain: String
) {
  simulateMessage(
    chainID: $chainId
    address: $address
    message: $message
    domain: $domain
  ) {
    scanning {
      result
      description
    }
    simulation {
      in {
        ...change
      }
      out {
        ...change
      }
      approvals {
        asset {
          ...asset
        }
        spender {
          ...target
        }
        quantityAllowed
        quantityAtRisk
        expiration
      }
      meta {
        to {
          ...target
        }
      }
    }
    error {
      message
      type
    }
  }
}

mutation validatePointsReferralCode($address: String!, $referral: String) {
  onboardPoints(address: $address, signature: "", referral: $referral) {
    error {
      type
    }
  }
}

mutation validatePointsSignature(
  $address: String!
  $signature: String!
  $referral: String
) {
  onboardPoints(address: $address, signature: $signature, referral: $referral) {
    error {
      type
    }
    meta {
      distribution {
        next
      }
      status
    }
    leaderboard {
      stats {
        total_users
        total_points
      }
      accounts {
        address
        earnings {
          total
        }
        ens
        avatarURL
      }
    }
    user {
      onboarding {
        earnings {
          total
        }
        categories {
          data {
            usd_amount
            total_collections
            owned_collections
          }
          type
          display_type
          earnings {
            total
          }
        }
      }
      referralCode
      earnings {
        total
      }
      stats {
        position {
          current
        }
      }
    }
  }
}

query validateReferral($code: String!) {
  validateReferral(referral: $code) {
    valid
    error {
      type
      message
    }
  }
}

query getPointsOnboardChallenge($address: String!, $referral: String) {
  pointsOnboardChallenge(address: $address, referral: $referral)
}

query points($address: String!) {
  points(address: $address) {
    error {
      message
      type
    }
    meta {
      distribution {
        next
      }
      status
    }
    leaderboard {
      stats {
        total_users
        total_points
        rank_cutoff
      }
      accounts {
        address
        earnings {
          total
        }
        ens
        avatarURL
      }
    }
    user {
      referralCode
      earnings {
        total
      }
      stats {
        position {
          unranked
          current
        }
        last_airdrop {
          differences {
            type
            earnings {
              total
            }
          }
        }
      }
    }
  }
}

mutation redeemCodeForPoints($address: String!, $redemptionCode: String!) {
  redeemCode(address: $address, code: $redemptionCode) {
    earnings {
      total
    }
    redemption_code {
      code
    }
    error {
      type
      message
    }
  }
}

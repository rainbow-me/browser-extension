# These patches are required for LavaMoat Node compat
diff --git a/node_modules/webpack/lib/Compiler.js b/node_modules/webpack/lib/Compiler.js
index 2d59a1a..9e23b9a 100644
--- a/node_modules/webpack/lib/Compiler.js
+++ b/node_modules/webpack/lib/Compiler.js
@@ -449,16 +449,16 @@ class Compiler {
 		const onCompiled = (err, compilation) => {
 			if (err) return finalCallback(err);
 
-			if (this.hooks.shouldEmit.call(compilation) === false) {
-				compilation.startTime = startTime;
-				compilation.endTime = Date.now();
-				const stats = new Stats(compilation);
-				this.hooks.done.callAsync(stats, err => {
-					if (err) return finalCallback(err);
-					return finalCallback(null, stats);
-				});
-				return;
-			}
+			// if (this.hooks.shouldEmit.call(compilation) === false) {
+			// 	compilation.startTime = startTime;
+			// 	compilation.endTime = Date.now();
+			// 	const stats = new Stats(compilation);
+			// 	this.hooks.done.callAsync(stats, err => {
+			// 		if (err) return finalCallback(err);
+			// 		return finalCallback(null, stats);
+			// 	});
+			// 	return;
+			// }
 
 			process.nextTick(() => {
 				logger = compilation.getLogger("webpack.Compiler");
diff --git a/node_modules/webpack/lib/RuntimeGlobals.js b/node_modules/webpack/lib/RuntimeGlobals.js
index 90d16b0..a53face 100644
--- a/node_modules/webpack/lib/RuntimeGlobals.js
+++ b/node_modules/webpack/lib/RuntimeGlobals.js
@@ -349,7 +349,7 @@ exports.system = "__webpack_require__.System";
  * the shorthand for Object.prototype.hasOwnProperty
  * using of it decreases the compiled bundle size
  */
-exports.hasOwnProperty = "__webpack_require__.o";
+exports.hasOwnProperty_ = "__webpack_require__.o";
 
 /**
  * the System.register context object
diff --git a/node_modules/webpack/lib/RuntimePlugin.js b/node_modules/webpack/lib/RuntimePlugin.js
index 624473d..7d513dd 100644
--- a/node_modules/webpack/lib/RuntimePlugin.js
+++ b/node_modules/webpack/lib/RuntimePlugin.js
@@ -78,7 +78,7 @@ const MODULE_DEPENDENCIES = {
 };
 
 const TREE_DEPENDENCIES = {
-	[RuntimeGlobals.definePropertyGetters]: [RuntimeGlobals.hasOwnProperty],
+	[RuntimeGlobals.definePropertyGetters]: [RuntimeGlobals.hasOwnProperty_],
 	[RuntimeGlobals.compatGetDefaultExport]: [
 		RuntimeGlobals.definePropertyGetters
 	],
@@ -88,7 +88,7 @@ const TREE_DEPENDENCIES = {
 		RuntimeGlobals.require
 	],
 	[RuntimeGlobals.initializeSharing]: [RuntimeGlobals.shareScopeMap],
-	[RuntimeGlobals.shareScopeMap]: [RuntimeGlobals.hasOwnProperty]
+	[RuntimeGlobals.shareScopeMap]: [RuntimeGlobals.hasOwnProperty_]
 };
 
 class RuntimePlugin {
@@ -167,7 +167,7 @@ class RuntimePlugin {
 					return true;
 				});
 			compilation.hooks.runtimeRequirementInTree
-				.for(RuntimeGlobals.hasOwnProperty)
+				.for(RuntimeGlobals.hasOwnProperty_)
 				.tap("RuntimePlugin", chunk => {
 					compilation.addRuntimeModule(
 						chunk,
diff --git a/node_modules/webpack/lib/container/ContainerEntryModule.js b/node_modules/webpack/lib/container/ContainerEntryModule.js
index 0de4d58..7d83410 100644
--- a/node_modules/webpack/lib/container/ContainerEntryModule.js
+++ b/node_modules/webpack/lib/container/ContainerEntryModule.js
@@ -144,7 +144,7 @@ class ContainerEntryModule extends Module {
 		const sources = new Map();
 		const runtimeRequirements = new Set([
 			RuntimeGlobals.definePropertyGetters,
-			RuntimeGlobals.hasOwnProperty,
+			RuntimeGlobals.hasOwnProperty_,
 			RuntimeGlobals.exports
 		]);
 		const getters = [];
@@ -207,7 +207,7 @@ class ContainerEntryModule extends Module {
 				// reusing the getScope variable to avoid creating a new var (and module is also used later)
 				"getScope = (",
 				Template.indent([
-					`${RuntimeGlobals.hasOwnProperty}(moduleMap, module)`,
+					`${RuntimeGlobals.hasOwnProperty_}(moduleMap, module)`,
 					Template.indent([
 						"? moduleMap[module]()",
 						`: Promise.resolve().then(${runtimeTemplate.basicFunction(
diff --git a/node_modules/webpack/lib/container/ContainerReferencePlugin.js b/node_modules/webpack/lib/container/ContainerReferencePlugin.js
index f860fba..d0fda61 100644
--- a/node_modules/webpack/lib/container/ContainerReferencePlugin.js
+++ b/node_modules/webpack/lib/container/ContainerReferencePlugin.js
@@ -129,7 +129,7 @@ class ContainerReferencePlugin {
 					.tap("ContainerReferencePlugin", (chunk, set) => {
 						set.add(RuntimeGlobals.module);
 						set.add(RuntimeGlobals.moduleFactoriesAddOnly);
-						set.add(RuntimeGlobals.hasOwnProperty);
+						set.add(RuntimeGlobals.hasOwnProperty_);
 						set.add(RuntimeGlobals.initializeSharing);
 						set.add(RuntimeGlobals.shareScopeMap);
 						compilation.addRuntimeModule(chunk, new RemoteRuntimeModule());
diff --git a/node_modules/webpack/lib/container/RemoteRuntimeModule.js b/node_modules/webpack/lib/container/RemoteRuntimeModule.js
index 7f4d15b..dfd1189 100644
--- a/node_modules/webpack/lib/container/RemoteRuntimeModule.js
+++ b/node_modules/webpack/lib/container/RemoteRuntimeModule.js
@@ -58,7 +58,7 @@ class RemoteRuntimeModule extends RuntimeModule {
 			`${
 				RuntimeGlobals.ensureChunkHandlers
 			}.remotes = ${runtimeTemplate.basicFunction("chunkId, promises", [
-				`if(${RuntimeGlobals.hasOwnProperty}(chunkMapping, chunkId)) {`,
+				`if(${RuntimeGlobals.hasOwnProperty_}(chunkMapping, chunkId)) {`,
 				Template.indent([
 					`chunkMapping[chunkId].forEach(${runtimeTemplate.basicFunction("id", [
 						`var getScope = ${RuntimeGlobals.currentRemoteGetScope};`,
diff --git a/node_modules/webpack/lib/css/CssLoadingRuntimeModule.js b/node_modules/webpack/lib/css/CssLoadingRuntimeModule.js
index 15dbef8..ed0ffc9 100644
--- a/node_modules/webpack/lib/css/CssLoadingRuntimeModule.js
+++ b/node_modules/webpack/lib/css/CssLoadingRuntimeModule.js
@@ -278,7 +278,7 @@ class CssLoadingRuntimeModule extends RuntimeModule {
 				? Template.asString([
 						`${fn}.css = ${runtimeTemplate.basicFunction("chunkId, promises", [
 							"// css chunk loading",
-							`var installedChunkData = ${RuntimeGlobals.hasOwnProperty}(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;`,
+							`var installedChunkData = ${RuntimeGlobals.hasOwnProperty_}(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;`,
 							'if(installedChunkData !== 0) { // 0 means "already installed".',
 							Template.indent([
 								"",
@@ -305,7 +305,7 @@ class CssLoadingRuntimeModule extends RuntimeModule {
 										`var loadingEnded = ${runtimeTemplate.basicFunction(
 											"event",
 											[
-												`if(${RuntimeGlobals.hasOwnProperty}(installedChunks, chunkId)) {`,
+												`if(${RuntimeGlobals.hasOwnProperty_}(installedChunks, chunkId)) {`,
 												Template.indent([
 													"installedChunkData = installedChunks[chunkId];",
 													"if(installedChunkData !== 0) installedChunks[chunkId] = undefined;",
diff --git a/node_modules/webpack/lib/css/CssModulesPlugin.js b/node_modules/webpack/lib/css/CssModulesPlugin.js
index 23c3d5d..4d0a46d 100644
--- a/node_modules/webpack/lib/css/CssModulesPlugin.js
+++ b/node_modules/webpack/lib/css/CssModulesPlugin.js
@@ -246,7 +246,7 @@ class CssModulesPlugin {
 
 					set.add(RuntimeGlobals.publicPath);
 					set.add(RuntimeGlobals.getChunkCssFilename);
-					set.add(RuntimeGlobals.hasOwnProperty);
+					set.add(RuntimeGlobals.hasOwnProperty_);
 					set.add(RuntimeGlobals.moduleFactoriesAddOnly);
 					set.add(RuntimeGlobals.makeNamespaceObject);
 
diff --git a/node_modules/webpack/lib/dependencies/HarmonyExportImportedSpecifierDependency.js b/node_modules/webpack/lib/dependencies/HarmonyExportImportedSpecifierDependency.js
index 3859254..cae7623 100644
--- a/node_modules/webpack/lib/dependencies/HarmonyExportImportedSpecifierDependency.js
+++ b/node_modules/webpack/lib/dependencies/HarmonyExportImportedSpecifierDependency.js
@@ -1205,9 +1205,9 @@ HarmonyExportImportedSpecifierDependency.Template = class HarmonyExportImportedS
 
 		runtimeRequirements.add(RuntimeGlobals.exports);
 		runtimeRequirements.add(RuntimeGlobals.definePropertyGetters);
-		runtimeRequirements.add(RuntimeGlobals.hasOwnProperty);
+		runtimeRequirements.add(RuntimeGlobals.hasOwnProperty_);
 
-		return `if(${RuntimeGlobals.hasOwnProperty}(${name}, ${JSON.stringify(
+		return `if(${RuntimeGlobals.hasOwnProperty_}(${name}, ${JSON.stringify(
 			valueKey[0]
 		)})) ${
 			RuntimeGlobals.definePropertyGetters
diff --git a/node_modules/webpack/lib/esm/ModuleChunkLoadingPlugin.js b/node_modules/webpack/lib/esm/ModuleChunkLoadingPlugin.js
index 5c984a5..6a91cec 100644
--- a/node_modules/webpack/lib/esm/ModuleChunkLoadingPlugin.js
+++ b/node_modules/webpack/lib/esm/ModuleChunkLoadingPlugin.js
@@ -36,7 +36,7 @@ class ModuleChunkLoadingPlugin {
 					onceForChunkSet.add(chunk);
 					if (!isEnabledForChunk(chunk)) return;
 					set.add(RuntimeGlobals.moduleFactoriesAddOnly);
-					set.add(RuntimeGlobals.hasOwnProperty);
+					set.add(RuntimeGlobals.hasOwnProperty_);
 					compilation.addRuntimeModule(
 						chunk,
 						new ModuleChunkLoadingRuntimeModule(set)
diff --git a/node_modules/webpack/lib/esm/ModuleChunkLoadingRuntimeModule.js b/node_modules/webpack/lib/esm/ModuleChunkLoadingRuntimeModule.js
index 4a846a7..416677a 100644
--- a/node_modules/webpack/lib/esm/ModuleChunkLoadingRuntimeModule.js
+++ b/node_modules/webpack/lib/esm/ModuleChunkLoadingRuntimeModule.js
@@ -149,7 +149,7 @@ class ModuleChunkLoadingRuntimeModule extends RuntimeModule {
 						"var moduleId, chunkId, i = 0;",
 						"for(moduleId in modules) {",
 						Template.indent([
-							`if(${RuntimeGlobals.hasOwnProperty}(modules, moduleId)) {`,
+							`if(${RuntimeGlobals.hasOwnProperty_}(modules, moduleId)) {`,
 							Template.indent(
 								`${RuntimeGlobals.moduleFactories}[moduleId] = modules[moduleId];`
 							),
@@ -160,7 +160,7 @@ class ModuleChunkLoadingRuntimeModule extends RuntimeModule {
 						"for(;i < ids.length; i++) {",
 						Template.indent([
 							"chunkId = ids[i];",
-							`if(${RuntimeGlobals.hasOwnProperty}(installedChunks, chunkId) && installedChunks[chunkId]) {`,
+							`if(${RuntimeGlobals.hasOwnProperty_}(installedChunks, chunkId) && installedChunks[chunkId]) {`,
 							Template.indent("installedChunks[chunkId][0]();"),
 							"}",
 							"installedChunks[ids[i]] = 0;"
@@ -177,7 +177,7 @@ class ModuleChunkLoadingRuntimeModule extends RuntimeModule {
 							hasJsMatcher !== false
 								? Template.indent([
 										"// import() chunk loading for javascript",
-										`var installedChunkData = ${RuntimeGlobals.hasOwnProperty}(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;`,
+										`var installedChunkData = ${RuntimeGlobals.hasOwnProperty_}(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;`,
 										'if(installedChunkData !== 0) { // 0 means "already installed".',
 										Template.indent([
 											"",
diff --git a/node_modules/webpack/lib/node/CommonJsChunkLoadingPlugin.js b/node_modules/webpack/lib/node/CommonJsChunkLoadingPlugin.js
index 2653d78..838ab97 100644
--- a/node_modules/webpack/lib/node/CommonJsChunkLoadingPlugin.js
+++ b/node_modules/webpack/lib/node/CommonJsChunkLoadingPlugin.js
@@ -50,7 +50,7 @@ class CommonJsChunkLoadingPlugin {
 					onceForChunkSet.add(chunk);
 					if (!isEnabledForChunk(chunk)) return;
 					set.add(RuntimeGlobals.moduleFactoriesAddOnly);
-					set.add(RuntimeGlobals.hasOwnProperty);
+					set.add(RuntimeGlobals.hasOwnProperty_);
 					compilation.addRuntimeModule(
 						chunk,
 						new ChunkLoadingRuntimeModule(set)
diff --git a/node_modules/webpack/lib/node/ReadFileChunkLoadingRuntimeModule.js b/node_modules/webpack/lib/node/ReadFileChunkLoadingRuntimeModule.js
index 68e292f..944cc6d 100644
--- a/node_modules/webpack/lib/node/ReadFileChunkLoadingRuntimeModule.js
+++ b/node_modules/webpack/lib/node/ReadFileChunkLoadingRuntimeModule.js
@@ -117,7 +117,7 @@ class ReadFileChunkLoadingRuntimeModule extends RuntimeModule {
 						"var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;",
 						"for(var moduleId in moreModules) {",
 						Template.indent([
-							`if(${RuntimeGlobals.hasOwnProperty}(moreModules, moduleId)) {`,
+							`if(${RuntimeGlobals.hasOwnProperty_}(moreModules, moduleId)) {`,
 							Template.indent([
 								`${RuntimeGlobals.moduleFactories}[moduleId] = moreModules[moduleId];`
 							]),
@@ -215,7 +215,7 @@ class ReadFileChunkLoadingRuntimeModule extends RuntimeModule {
 									"var runtime = update.runtime;",
 									"for(var moduleId in updatedModules) {",
 									Template.indent([
-										`if(${RuntimeGlobals.hasOwnProperty}(updatedModules, moduleId)) {`,
+										`if(${RuntimeGlobals.hasOwnProperty_}(updatedModules, moduleId)) {`,
 										Template.indent([
 											`currentUpdate[moduleId] = updatedModules[moduleId];`,
 											"if(updatedModulesList) updatedModulesList.push(moduleId);"
@@ -244,7 +244,7 @@ class ReadFileChunkLoadingRuntimeModule extends RuntimeModule {
 								/\$ensureChunkHandlers\$/g,
 								RuntimeGlobals.ensureChunkHandlers
 							)
-							.replace(/\$hasOwnProperty\$/g, RuntimeGlobals.hasOwnProperty)
+							.replace(/\$hasOwnProperty\$/g, RuntimeGlobals.hasOwnProperty_)
 							.replace(/\$hmrModuleData\$/g, RuntimeGlobals.hmrModuleData)
 							.replace(
 								/\$hmrDownloadUpdateHandlers\$/g,
diff --git a/node_modules/webpack/lib/node/RequireChunkLoadingRuntimeModule.js b/node_modules/webpack/lib/node/RequireChunkLoadingRuntimeModule.js
index 8b46fbc..8024947 100644
--- a/node_modules/webpack/lib/node/RequireChunkLoadingRuntimeModule.js
+++ b/node_modules/webpack/lib/node/RequireChunkLoadingRuntimeModule.js
@@ -117,7 +117,7 @@ class RequireChunkLoadingRuntimeModule extends RuntimeModule {
 						"var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;",
 						"for(var moduleId in moreModules) {",
 						Template.indent([
-							`if(${RuntimeGlobals.hasOwnProperty}(moreModules, moduleId)) {`,
+							`if(${RuntimeGlobals.hasOwnProperty_}(moreModules, moduleId)) {`,
 							Template.indent([
 								`${RuntimeGlobals.moduleFactories}[moduleId] = moreModules[moduleId];`
 							]),
@@ -179,7 +179,7 @@ class RequireChunkLoadingRuntimeModule extends RuntimeModule {
 							"var runtime = update.runtime;",
 							"for(var moduleId in updatedModules) {",
 							Template.indent([
-								`if(${RuntimeGlobals.hasOwnProperty}(updatedModules, moduleId)) {`,
+								`if(${RuntimeGlobals.hasOwnProperty_}(updatedModules, moduleId)) {`,
 								Template.indent([
 									`currentUpdate[moduleId] = updatedModules[moduleId];`,
 									"if(updatedModulesList) updatedModulesList.push(moduleId);"
@@ -203,7 +203,7 @@ class RequireChunkLoadingRuntimeModule extends RuntimeModule {
 								/\$ensureChunkHandlers\$/g,
 								RuntimeGlobals.ensureChunkHandlers
 							)
-							.replace(/\$hasOwnProperty\$/g, RuntimeGlobals.hasOwnProperty)
+							.replace(/\$hasOwnProperty\$/g, RuntimeGlobals.hasOwnProperty_)
 							.replace(/\$hmrModuleData\$/g, RuntimeGlobals.hmrModuleData)
 							.replace(
 								/\$hmrDownloadUpdateHandlers\$/g,
diff --git a/node_modules/webpack/lib/runtime/DefinePropertyGettersRuntimeModule.js b/node_modules/webpack/lib/runtime/DefinePropertyGettersRuntimeModule.js
index 5fce2be..acdb38c 100644
--- a/node_modules/webpack/lib/runtime/DefinePropertyGettersRuntimeModule.js
+++ b/node_modules/webpack/lib/runtime/DefinePropertyGettersRuntimeModule.js
@@ -24,7 +24,7 @@ class DefinePropertyGettersRuntimeModule extends HelperRuntimeModule {
 			`${fn} = ${runtimeTemplate.basicFunction("exports, definition", [
 				`for(var key in definition) {`,
 				Template.indent([
-					`if(${RuntimeGlobals.hasOwnProperty}(definition, key) && !${RuntimeGlobals.hasOwnProperty}(exports, key)) {`,
+					`if(${RuntimeGlobals.hasOwnProperty_}(definition, key) && !${RuntimeGlobals.hasOwnProperty_}(exports, key)) {`,
 					Template.indent([
 						"Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });"
 					]),
diff --git a/node_modules/webpack/lib/runtime/HasOwnPropertyRuntimeModule.js b/node_modules/webpack/lib/runtime/HasOwnPropertyRuntimeModule.js
index 1971794..6bc4a9c 100644
--- a/node_modules/webpack/lib/runtime/HasOwnPropertyRuntimeModule.js
+++ b/node_modules/webpack/lib/runtime/HasOwnPropertyRuntimeModule.js
@@ -21,7 +21,7 @@ class HasOwnPropertyRuntimeModule extends RuntimeModule {
 		const { runtimeTemplate } = this.compilation;
 
 		return Template.asString([
-			`${RuntimeGlobals.hasOwnProperty} = ${runtimeTemplate.returningFunction(
+			`${RuntimeGlobals.hasOwnProperty_} = ${runtimeTemplate.returningFunction(
 				"Object.prototype.hasOwnProperty.call(obj, prop)",
 				"obj, prop"
 			)}`
diff --git a/node_modules/webpack/lib/sharing/ConsumeSharedPlugin.js b/node_modules/webpack/lib/sharing/ConsumeSharedPlugin.js
index a1a3c85..9629bdd 100644
--- a/node_modules/webpack/lib/sharing/ConsumeSharedPlugin.js
+++ b/node_modules/webpack/lib/sharing/ConsumeSharedPlugin.js
@@ -304,7 +304,7 @@ class ConsumeSharedPlugin {
 						set.add(RuntimeGlobals.moduleFactoriesAddOnly);
 						set.add(RuntimeGlobals.shareScopeMap);
 						set.add(RuntimeGlobals.initializeSharing);
-						set.add(RuntimeGlobals.hasOwnProperty);
+						set.add(RuntimeGlobals.hasOwnProperty_);
 						compilation.addRuntimeModule(
 							chunk,
 							new ConsumeSharedRuntimeModule(set)
diff --git a/node_modules/webpack/lib/sharing/ConsumeSharedRuntimeModule.js b/node_modules/webpack/lib/sharing/ConsumeSharedRuntimeModule.js
index 78edabd..18cbec9 100644
--- a/node_modules/webpack/lib/sharing/ConsumeSharedRuntimeModule.js
+++ b/node_modules/webpack/lib/sharing/ConsumeSharedRuntimeModule.js
@@ -81,7 +81,7 @@ class ConsumeSharedRuntimeModule extends RuntimeModule {
 			satisfyRuntimeCode(runtimeTemplate),
 			`var ensureExistence = ${runtimeTemplate.basicFunction("scopeName, key", [
 				`var scope = ${RuntimeGlobals.shareScopeMap}[scopeName];`,
-				`if(!scope || !${RuntimeGlobals.hasOwnProperty}(scope, key)) throw new Error("Shared module " + key + " doesn't exist in shared scope " + scopeName);`,
+				`if(!scope || !${RuntimeGlobals.hasOwnProperty_}(scope, key)) throw new Error("Shared module " + key + " doesn't exist in shared scope " + scopeName);`,
 				"return scope;"
 			])};`,
 			`var findVersion = ${runtimeTemplate.basicFunction("scope, key", [
@@ -199,7 +199,7 @@ class ConsumeSharedRuntimeModule extends RuntimeModule {
 			`var loadFallback = /*#__PURE__*/ init(${runtimeTemplate.basicFunction(
 				"scopeName, scope, key, fallback",
 				[
-					`return scope && ${RuntimeGlobals.hasOwnProperty}(scope, key) ? get(findVersion(scope, key)) : fallback();`
+					`return scope && ${RuntimeGlobals.hasOwnProperty_}(scope, key) ? get(findVersion(scope, key)) : fallback();`
 				]
 			)});`,
 			`var loadVersionCheck = /*#__PURE__*/ init(${runtimeTemplate.basicFunction(
@@ -240,35 +240,35 @@ class ConsumeSharedRuntimeModule extends RuntimeModule {
 			`var loadVersionCheckFallback = /*#__PURE__*/ init(${runtimeTemplate.basicFunction(
 				"scopeName, scope, key, version, fallback",
 				[
-					`if(!scope || !${RuntimeGlobals.hasOwnProperty}(scope, key)) return fallback();`,
+					`if(!scope || !${RuntimeGlobals.hasOwnProperty_}(scope, key)) return fallback();`,
 					"return get(findValidVersion(scope, key, version) || warnInvalidVersion(scope, scopeName, key, version) || findVersion(scope, key));"
 				]
 			)});`,
 			`var loadSingletonFallback = /*#__PURE__*/ init(${runtimeTemplate.basicFunction(
 				"scopeName, scope, key, fallback",
 				[
-					`if(!scope || !${RuntimeGlobals.hasOwnProperty}(scope, key)) return fallback();`,
+					`if(!scope || !${RuntimeGlobals.hasOwnProperty_}(scope, key)) return fallback();`,
 					"return getSingleton(scope, scopeName, key);"
 				]
 			)});`,
 			`var loadSingletonVersionCheckFallback = /*#__PURE__*/ init(${runtimeTemplate.basicFunction(
 				"scopeName, scope, key, version, fallback",
 				[
-					`if(!scope || !${RuntimeGlobals.hasOwnProperty}(scope, key)) return fallback();`,
+					`if(!scope || !${RuntimeGlobals.hasOwnProperty_}(scope, key)) return fallback();`,
 					"return getSingletonVersion(scope, scopeName, key, version);"
 				]
 			)});`,
 			`var loadStrictVersionCheckFallback = /*#__PURE__*/ init(${runtimeTemplate.basicFunction(
 				"scopeName, scope, key, version, fallback",
 				[
-					`var entry = scope && ${RuntimeGlobals.hasOwnProperty}(scope, key) && findValidVersion(scope, key, version);`,
+					`var entry = scope && ${RuntimeGlobals.hasOwnProperty_}(scope, key) && findValidVersion(scope, key, version);`,
 					`return entry ? get(entry) : fallback();`
 				]
 			)});`,
 			`var loadStrictSingletonVersionCheckFallback = /*#__PURE__*/ init(${runtimeTemplate.basicFunction(
 				"scopeName, scope, key, version, fallback",
 				[
-					`if(!scope || !${RuntimeGlobals.hasOwnProperty}(scope, key)) return fallback();`,
+					`if(!scope || !${RuntimeGlobals.hasOwnProperty_}(scope, key)) return fallback();`,
 					"return getStrictSingletonVersion(scope, scopeName, key, version);"
 				]
 			)});`,
@@ -309,12 +309,12 @@ class ConsumeSharedRuntimeModule extends RuntimeModule {
 						`${
 							RuntimeGlobals.ensureChunkHandlers
 						}.consumes = ${runtimeTemplate.basicFunction("chunkId, promises", [
-							`if(${RuntimeGlobals.hasOwnProperty}(chunkMapping, chunkId)) {`,
+							`if(${RuntimeGlobals.hasOwnProperty_}(chunkMapping, chunkId)) {`,
 							Template.indent([
 								`chunkMapping[chunkId].forEach(${runtimeTemplate.basicFunction(
 									"id",
 									[
-										`if(${RuntimeGlobals.hasOwnProperty}(installedModules, id)) return promises.push(installedModules[id]);`,
+										`if(${RuntimeGlobals.hasOwnProperty_}(installedModules, id)) return promises.push(installedModules[id]);`,
 										`var onFactory = ${runtimeTemplate.basicFunction(
 											"factory",
 											[
diff --git a/node_modules/webpack/lib/sharing/ShareRuntimeModule.js b/node_modules/webpack/lib/sharing/ShareRuntimeModule.js
index eca7252..1a98697 100644
--- a/node_modules/webpack/lib/sharing/ShareRuntimeModule.js
+++ b/node_modules/webpack/lib/sharing/ShareRuntimeModule.js
@@ -74,7 +74,7 @@ class ShareRuntimeModule extends RuntimeModule {
 					"// only runs once",
 					"if(initPromises[name]) return initPromises[name];",
 					"// creates a new share scope if needed",
-					`if(!${RuntimeGlobals.hasOwnProperty}(${RuntimeGlobals.shareScopeMap}, name)) ${RuntimeGlobals.shareScopeMap}[name] = {};`,
+					`if(!${RuntimeGlobals.hasOwnProperty_}(${RuntimeGlobals.shareScopeMap}, name)) ${RuntimeGlobals.shareScopeMap}[name] = {};`,
 					"// runs all init snippets from all modules reachable",
 					`var scope = ${RuntimeGlobals.shareScopeMap}[name];`,
 					`var warn = ${runtimeTemplate.returningFunction(
diff --git a/node_modules/webpack/lib/web/JsonpChunkLoadingPlugin.js b/node_modules/webpack/lib/web/JsonpChunkLoadingPlugin.js
index 34f0cc7..a5368cc 100644
--- a/node_modules/webpack/lib/web/JsonpChunkLoadingPlugin.js
+++ b/node_modules/webpack/lib/web/JsonpChunkLoadingPlugin.js
@@ -35,7 +35,7 @@ class JsonpChunkLoadingPlugin {
 					onceForChunkSet.add(chunk);
 					if (!isEnabledForChunk(chunk)) return;
 					set.add(RuntimeGlobals.moduleFactoriesAddOnly);
-					set.add(RuntimeGlobals.hasOwnProperty);
+					set.add(RuntimeGlobals.hasOwnProperty_);
 					compilation.addRuntimeModule(
 						chunk,
 						new JsonpChunkLoadingRuntimeModule(set)
diff --git a/node_modules/webpack/lib/web/JsonpChunkLoadingRuntimeModule.js b/node_modules/webpack/lib/web/JsonpChunkLoadingRuntimeModule.js
index ea7bfb4..6e268cd 100644
--- a/node_modules/webpack/lib/web/JsonpChunkLoadingRuntimeModule.js
+++ b/node_modules/webpack/lib/web/JsonpChunkLoadingRuntimeModule.js
@@ -139,7 +139,7 @@ class JsonpChunkLoadingRuntimeModule extends RuntimeModule {
 							hasJsMatcher !== false
 								? Template.indent([
 										"// JSONP chunk loading for javascript",
-										`var installedChunkData = ${RuntimeGlobals.hasOwnProperty}(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;`,
+										`var installedChunkData = ${RuntimeGlobals.hasOwnProperty_}(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;`,
 										'if(installedChunkData !== 0) { // 0 means "already installed".',
 										Template.indent([
 											"",
@@ -168,7 +168,7 @@ class JsonpChunkLoadingRuntimeModule extends RuntimeModule {
 													`var loadingEnded = ${runtimeTemplate.basicFunction(
 														"event",
 														[
-															`if(${RuntimeGlobals.hasOwnProperty}(installedChunks, chunkId)) {`,
+															`if(${RuntimeGlobals.hasOwnProperty_}(installedChunks, chunkId)) {`,
 															Template.indent([
 																"installedChunkData = installedChunks[chunkId];",
 																"if(installedChunkData !== 0) installedChunks[chunkId] = undefined;",
@@ -205,7 +205,7 @@ class JsonpChunkLoadingRuntimeModule extends RuntimeModule {
 						RuntimeGlobals.prefetchChunkHandlers
 				  }.j = ${runtimeTemplate.basicFunction("chunkId", [
 						`if((!${
-							RuntimeGlobals.hasOwnProperty
+							RuntimeGlobals.hasOwnProperty_
 						}(installedChunks, chunkId) || installedChunks[chunkId] === undefined) && ${
 							hasJsMatcher === true ? "true" : hasJsMatcher("chunkId")
 						}) {`,
@@ -241,7 +241,7 @@ class JsonpChunkLoadingRuntimeModule extends RuntimeModule {
 						RuntimeGlobals.preloadChunkHandlers
 				  }.j = ${runtimeTemplate.basicFunction("chunkId", [
 						`if((!${
-							RuntimeGlobals.hasOwnProperty
+							RuntimeGlobals.hasOwnProperty_
 						}(installedChunks, chunkId) || installedChunks[chunkId] === undefined) && ${
 							hasJsMatcher === true ? "true" : hasJsMatcher("chunkId")
 						}) {`,
@@ -326,7 +326,7 @@ class JsonpChunkLoadingRuntimeModule extends RuntimeModule {
 							[
 								"for(var moduleId in moreModules) {",
 								Template.indent([
-									`if(${RuntimeGlobals.hasOwnProperty}(moreModules, moduleId)) {`,
+									`if(${RuntimeGlobals.hasOwnProperty_}(moreModules, moduleId)) {`,
 									Template.indent([
 										"currentUpdate[moduleId] = moreModules[moduleId];",
 										"if(currentUpdatedModulesList) currentUpdatedModulesList.push(moduleId);"
@@ -356,7 +356,7 @@ class JsonpChunkLoadingRuntimeModule extends RuntimeModule {
 								/\$ensureChunkHandlers\$/g,
 								RuntimeGlobals.ensureChunkHandlers
 							)
-							.replace(/\$hasOwnProperty\$/g, RuntimeGlobals.hasOwnProperty)
+							.replace(/\$hasOwnProperty\$/g, RuntimeGlobals.hasOwnProperty_)
 							.replace(/\$hmrModuleData\$/g, RuntimeGlobals.hmrModuleData)
 							.replace(
 								/\$hmrDownloadUpdateHandlers\$/g,
@@ -415,7 +415,7 @@ class JsonpChunkLoadingRuntimeModule extends RuntimeModule {
 								Template.indent([
 									"for(moduleId in moreModules) {",
 									Template.indent([
-										`if(${RuntimeGlobals.hasOwnProperty}(moreModules, moduleId)) {`,
+										`if(${RuntimeGlobals.hasOwnProperty_}(moreModules, moduleId)) {`,
 										Template.indent(
 											`${RuntimeGlobals.moduleFactories}[moduleId] = moreModules[moduleId];`
 										),
@@ -429,7 +429,7 @@ class JsonpChunkLoadingRuntimeModule extends RuntimeModule {
 								"for(;i < chunkIds.length; i++) {",
 								Template.indent([
 									"chunkId = chunkIds[i];",
-									`if(${RuntimeGlobals.hasOwnProperty}(installedChunks, chunkId) && installedChunks[chunkId]) {`,
+									`if(${RuntimeGlobals.hasOwnProperty_}(installedChunks, chunkId) && installedChunks[chunkId]) {`,
 									Template.indent("installedChunks[chunkId][0]();"),
 									"}",
 									"installedChunks[chunkId] = 0;"
diff --git a/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingPlugin.js b/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingPlugin.js
index b0dda12..1476bb7 100644
--- a/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingPlugin.js
+++ b/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingPlugin.js
@@ -41,7 +41,7 @@ class ImportScriptsChunkLoadingPlugin {
 					if (!isEnabledForChunk(chunk)) return;
 					const withCreateScriptUrl = !!compilation.outputOptions.trustedTypes;
 					set.add(RuntimeGlobals.moduleFactoriesAddOnly);
-					set.add(RuntimeGlobals.hasOwnProperty);
+					set.add(RuntimeGlobals.hasOwnProperty_);
 					if (withCreateScriptUrl) {
 						set.add(RuntimeGlobals.createScriptUrl);
 					}
diff --git a/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingRuntimeModule.js b/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingRuntimeModule.js
index b9947d6..2ef98fc 100644
--- a/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingRuntimeModule.js
+++ b/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingRuntimeModule.js
@@ -113,7 +113,7 @@ class ImportScriptsChunkLoadingRuntimeModule extends RuntimeModule {
 							),
 							"for(var moduleId in moreModules) {",
 							Template.indent([
-								`if(${RuntimeGlobals.hasOwnProperty}(moreModules, moduleId)) {`,
+								`if(${RuntimeGlobals.hasOwnProperty_}(moreModules, moduleId)) {`,
 								Template.indent(
 									`${RuntimeGlobals.moduleFactories}[moduleId] = moreModules[moduleId];`
 								),
@@ -169,7 +169,7 @@ class ImportScriptsChunkLoadingRuntimeModule extends RuntimeModule {
 							)}] = ${runtimeTemplate.basicFunction("_, moreModules, runtime", [
 								"for(var moduleId in moreModules) {",
 								Template.indent([
-									`if(${RuntimeGlobals.hasOwnProperty}(moreModules, moduleId)) {`,
+									`if(${RuntimeGlobals.hasOwnProperty_}(moreModules, moduleId)) {`,
 									Template.indent([
 										"currentUpdate[moduleId] = moreModules[moduleId];",
 										"if(updatedModulesList) updatedModulesList.push(moduleId);"
@@ -202,7 +202,7 @@ class ImportScriptsChunkLoadingRuntimeModule extends RuntimeModule {
 								/\$ensureChunkHandlers\$/g,
 								RuntimeGlobals.ensureChunkHandlers
 							)
-							.replace(/\$hasOwnProperty\$/g, RuntimeGlobals.hasOwnProperty)
+							.replace(/\$hasOwnProperty\$/g, RuntimeGlobals.hasOwnProperty_)
 							.replace(/\$hmrModuleData\$/g, RuntimeGlobals.hmrModuleData)
 							.replace(
 								/\$hmrDownloadUpdateHandlers\$/g,

diff --git a/node_modules/msw/lib/node/index.mjs b/node_modules/msw/lib/node/index.mjs
index 2cce410..edccb6e 100644
--- a/node_modules/msw/lib/node/index.mjs
+++ b/node_modules/msw/lib/node/index.mjs
@@ -42,16 +42,18 @@ import { setTimeout as nodeSetTimeout } from "timers";
 var setTimeout = nodeSetTimeout;
 
 // src/node/setupServer.ts
-import { ClientRequestInterceptor } from "@mswjs/interceptors/lib/interceptors/ClientRequest";
-import { XMLHttpRequestInterceptor } from "@mswjs/interceptors/lib/interceptors/XMLHttpRequest";
+import { ClientRequestInterceptor } from "@mswjs/interceptors/lib/interceptors/ClientRequest/index.js";
+import { XMLHttpRequestInterceptor } from "@mswjs/interceptors/lib/interceptors/XMLHttpRequest/index.js";
 
 // src/node/createSetupServer.ts
-import { bold } from "chalk";
+import pkg from 'chalk';
+const { bold } = pkg;
+
 import { isNodeProcess as isNodeProcess3 } from "is-node-process";
 import { StrictEventEmitter } from "strict-event-emitter";
 import {
   BatchInterceptor
-} from "@mswjs/interceptors";
+} from "@mswjs/interceptors/lib/index.js";
 
 // src/utils/internal/requestHandlerUtils.ts
 function use(currentHandlers, ...handlers) {
@@ -256,7 +258,8 @@ function isStringEqual(actual, expected) {
 }
 
 // src/context/status.ts
-import statuses from "statuses/codes.json";
+import { readFile } from 'fs/promises';
+const statuses = JSON.parse(await readFile(new URL('statuses/codes.json', import.meta.url)));
 var status = (statusCode, statusText) => {
   return (res) => {
     res.status = statusCode;
@@ -575,7 +578,7 @@ function prepareResponse(res) {
 
 // src/utils/matching/matchRequestUrl.ts
 import { match } from "path-to-regexp";
-import { getCleanUrl } from "@mswjs/interceptors/lib/utils/getCleanUrl";
+import { getCleanUrl } from "@mswjs/interceptors/lib/utils/getCleanUrl.js";
 
 // src/utils/url/cleanUrl.ts
 var REDUNDANT_CHARACTERS_EXP = /[\?|#].*$/g;
@@ -636,9 +639,9 @@ function matchRequestUrl(url, path, baseUrl) {
 
 // src/utils/request/MockedRequest.ts
 import * as cookieUtils3 from "cookie";
-import { store } from "@mswjs/cookies";
-import { IsomorphicRequest } from "@mswjs/interceptors";
-import { decodeBuffer } from "@mswjs/interceptors/lib/utils/bufferUtils";
+import { store } from "@mswjs/cookies/lib/index.js";
+import { IsomorphicRequest } from "@mswjs/interceptors/lib/index.js";
+import { decodeBuffer } from "@mswjs/interceptors/lib/utils/bufferUtils.js";
 import { Headers as Headers2 } from "headers-polyfill";
 
 // src/utils/request/getRequestCookies.ts

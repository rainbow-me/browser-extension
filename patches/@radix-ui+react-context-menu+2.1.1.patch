diff --git a/node_modules/@radix-ui/react-context-menu/.DS_Store b/node_modules/@radix-ui/react-context-menu/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@radix-ui/react-context-menu/dist/index.d.ts b/node_modules/@radix-ui/react-context-menu/dist/index.d.ts
index 7f9436e..d91c016 100644
--- a/node_modules/@radix-ui/react-context-menu/dist/index.d.ts
+++ b/node_modules/@radix-ui/react-context-menu/dist/index.d.ts
@@ -9,6 +9,7 @@ export interface ContextMenuProps {
     onOpenChange?(open: boolean): void;
     dir?: Direction;
     modal?: boolean;
+    open?: boolean
 }
 export const ContextMenu: React.FC<ContextMenuProps>;
 type PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;
diff --git a/node_modules/@radix-ui/react-context-menu/dist/index.module.js b/node_modules/@radix-ui/react-context-menu/dist/index.module.js
index b3a6715..6ca064c 100644
--- a/node_modules/@radix-ui/react-context-menu/dist/index.module.js
+++ b/node_modules/@radix-ui/react-context-menu/dist/index.module.js
@@ -25,8 +25,12 @@ const [$1b0217ee4a91d156$var$createContextMenuContext, $1b0217ee4a91d156$export$
 const $1b0217ee4a91d156$var$useMenuScope = $3TiJz$createMenuScope();
 const [$1b0217ee4a91d156$var$ContextMenuProvider, $1b0217ee4a91d156$var$useContextMenuContext] = $1b0217ee4a91d156$var$createContextMenuContext($1b0217ee4a91d156$var$CONTEXT_MENU_NAME);
 const $1b0217ee4a91d156$export$8dc6765e8be191c7 = (props)=>{
-    const { __scopeContextMenu: __scopeContextMenu , children: children , onOpenChange: onOpenChange , dir: dir , modal: modal = true  } = props;
-    const [open1, setOpen] = $3TiJz$useState(false);
+    const { __scopeContextMenu: __scopeContextMenu , children: children , open: openProp , onOpenChange: onOpenChange , defaultOpen: defaultOpen , dir: dir , modal: modal = true  } = props;
+    const [open = false, setOpen] = $3TiJz$useControllableState({
+        prop: openProp,
+        defaultProp: defaultOpen,
+        onChange: onOpenChange
+    });
     const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
     const handleOpenChangeProp = $3TiJz$useCallbackRef(onOpenChange);
     const handleOpenChange = $3TiJz$useCallback((open)=>{
@@ -37,12 +41,12 @@ const $1b0217ee4a91d156$export$8dc6765e8be191c7 = (props)=>{
     ]);
     return /*#__PURE__*/ $3TiJz$createElement($1b0217ee4a91d156$var$ContextMenuProvider, {
         scope: __scopeContextMenu,
-        open: open1,
+        open: open,
         onOpenChange: handleOpenChange,
         modal: modal
     }, /*#__PURE__*/ $3TiJz$createElement($3TiJz$Root, $3TiJz$babelruntimehelpersesmextends({}, menuScope, {
         dir: dir,
-        open: open1,
+        open: open,
         onOpenChange: handleOpenChange,
         modal: modal
     }), children));
@@ -100,19 +104,14 @@ const $1b0217ee4a91d156$export$be6fc7b1d5b0beb9 = /*#__PURE__*/ $3TiJz$forwardRe
             ...props.style
         } // if trigger is disabled, enable the native Context Menu
         ,
-        onContextMenu: disabled ? props.onContextMenu : $3TiJz$composeEventHandlers(props.onContextMenu, (event)=>{
+        onContextMenu: props.onContextMenu,
+        onPointerDown: disabled ? props.onContextMenu : $3TiJz$composeEventHandlers(props.onContextMenu, (event)=>{
             // clearing the long press here because some platforms already support
             // long press to trigger a `contextmenu` event
             clearLongPress();
             handleOpen(event);
             event.preventDefault();
         }),
-        onPointerDown: disabled ? props.onPointerDown : $3TiJz$composeEventHandlers(props.onPointerDown, $1b0217ee4a91d156$var$whenTouchOrPen((event)=>{
-            // clear the long press here in case there's multiple touch points
-            clearLongPress();
-            longPressTimerRef.current = window.setTimeout(()=>handleOpen(event)
-            , 700);
-        })),
         onPointerMove: disabled ? props.onPointerMove : $3TiJz$composeEventHandlers(props.onPointerMove, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress)),
         onPointerCancel: disabled ? props.onPointerCancel : $3TiJz$composeEventHandlers(props.onPointerCancel, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress)),
         onPointerUp: disabled ? props.onPointerUp : $3TiJz$composeEventHandlers(props.onPointerUp, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress))
